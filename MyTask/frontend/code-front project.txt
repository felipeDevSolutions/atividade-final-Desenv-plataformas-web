FRONTEND:

ğŸ“¦frontend
 â”£ ğŸ“‚node_modules
 â”£ ğŸ“‚public
 â”ƒ â”— ğŸ“œindex.html
 â”£ ğŸ“‚src
 â”ƒ â”£ ğŸ“‚components
 â”ƒ â”ƒ â”£ ğŸ“‚layout
 â”ƒ â”ƒ â”ƒ â”£ ğŸ“œAlerts.jsx
 â”ƒ â”ƒ â”ƒ â”£ ğŸ“œLayout.css
 â”ƒ â”ƒ â”ƒ â”£ ğŸ“œLayout.jsx
 â”ƒ â”ƒ â”ƒ â”— ğŸ“œtoasts.css
 â”ƒ â”ƒ â”— ğŸ“‚Loading
 â”ƒ â”ƒ â”ƒ â”£ ğŸ“œLoading.css
 â”ƒ â”ƒ â”ƒ â”— ğŸ“œLoading.jsx
 â”ƒ â”£ ğŸ“‚context
 â”ƒ â”ƒ â”£ ğŸ“œAuthContext.js
 â”ƒ â”ƒ â”— ğŸ“œAuthReducer.js
 â”ƒ â”£ ğŸ“‚pages
 â”ƒ â”ƒ â”£ ğŸ“‚Admin
 â”ƒ â”ƒ â”ƒ â”£ ğŸ“œAdminPanel.css
 â”ƒ â”ƒ â”ƒ â”— ğŸ“œAdminPanel.jsx
 â”ƒ â”ƒ â”£ ğŸ“‚auth
 â”ƒ â”ƒ â”ƒ â”£ ğŸ“‚EditUser
 â”ƒ â”ƒ â”ƒ â”ƒ â”£ ğŸ“œEditUser.css
 â”ƒ â”ƒ â”ƒ â”ƒ â”— ğŸ“œEditUser.jsx
 â”ƒ â”ƒ â”ƒ â”£ ğŸ“‚login
 â”ƒ â”ƒ â”ƒ â”ƒ â”£ ğŸ“œlogin.css
 â”ƒ â”ƒ â”ƒ â”ƒ â”— ğŸ“œLogin.jsx
 â”ƒ â”ƒ â”ƒ â”£ ğŸ“‚resetPassword
 â”ƒ â”ƒ â”ƒ â”ƒ â”£ ğŸ“œForgotPassword.jsx
 â”ƒ â”ƒ â”ƒ â”ƒ â”— ğŸ“œresetPassword.jsx
 â”ƒ â”ƒ â”ƒ â”£ ğŸ“‚signup
 â”ƒ â”ƒ â”ƒ â”ƒ â”£ ğŸ“œsignup.css
 â”ƒ â”ƒ â”ƒ â”ƒ â”— ğŸ“œsignup.jsx
 â”ƒ â”ƒ â”ƒ â”£ ğŸ“‚verifyEmail
 â”ƒ â”ƒ â”ƒ â”ƒ â”— ğŸ“œVerifyEmail.jsx
 â”ƒ â”ƒ â”ƒ â”— ğŸ“œform.css
 â”ƒ â”ƒ â”£ ğŸ“‚contacts
 â”ƒ â”ƒ â”£ ğŸ“‚home
 â”ƒ â”ƒ â”ƒ â”£ ğŸ“œHome.css
 â”ƒ â”ƒ â”ƒ â”£ ğŸ“œHome.jsx
 â”ƒ â”ƒ â”£ ğŸ“‚landing
 â”ƒ â”ƒ â”ƒ â”£ ğŸ“œLandingPage.css
 â”ƒ â”ƒ â”ƒ â”— ğŸ“œLandingPage.jsx
 â”ƒ â”ƒ â”£ ğŸ“‚ProjectPage
 â”ƒ â”ƒ â”ƒ â”£ ğŸ“œProject.css
 â”ƒ â”ƒ â”ƒ â”— ğŸ“œProject.jsx
 â”ƒ â”ƒ â”— ğŸ“‚utils
 â”ƒ â”ƒ â”ƒ â”£ ğŸ“œterms.css
 â”ƒ â”ƒ â”ƒ â”— ğŸ“œterms.jsx
 â”ƒ â”£ ğŸ“‚static
 â”ƒ â”ƒ â”£ ğŸ“œHRU.png
 â”ƒ â”ƒ â”£ ğŸ“œicons8-task-48.png
 â”ƒ â”ƒ â”£ ğŸ“œicons8-task-96.png
 â”ƒ â”ƒ â”£ ğŸ“œicons8-task.gif
 â”ƒ â”ƒ â”£ ğŸ“œlogo.png
 â”ƒ â”ƒ â”— ğŸ“œqmentum.png
 â”ƒ â”£ ğŸ“œApp.js
 â”ƒ â”— ğŸ“œindex.js
 â”£ ğŸ“‚style
 â”ƒ â”£ ğŸ“œdark.scss
 â”ƒ â”— ğŸ“œstyle.css
 â”£ ğŸ“œ.gitignore
 â”£ ğŸ“œpackage-lock.json
 â”— ğŸ“œpackage.json
 

 index.js:
 import React from 'react';
import { createRoot } from 'react-dom/client';
import 'bootstrap/dist/css/bootstrap.min.css'; 
import App from './App';
import { AuthContextProvider } from './context/AuthContext'; 

// Pegando o elemento DOM onde a aplicaÃ§Ã£o serÃ¡ montada
const container = document.getElementById('root');
const root = createRoot(container);

root.render(
  <React.StrictMode>
    <AuthContextProvider>
      <App />
    </AuthContextProvider>
  </React.StrictMode>
);


====================================================================================================


index.html:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- <link href="../style/style.css" rel="stylesheet" type="text/css" /> -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Patrick+Hand+SC&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Nanum+Brush+Script&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Shantell+Sans:ital,wght@0,300..800;1,300..800&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Just+Me+Again+Down+Here&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Sue+Ellen+Francisco&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Square+Peg&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Just+Another+Hand&display=swap" rel="stylesheet">
  <link rel="icon" href="https://img.icons8.com/?size=100&id=tqnBJvTRxC3E&format=png&color=000000">
  <!-- https://upload.wikimedia.org/wikipedia/commons/thumb/b/b2/Repl.it_logo.svg/220px-Repl.it_logo.png -->
  <title>MyTask - Grupo 50</title>
</head>
<body class="colors">
  <noscript>You need to enable JavaScript to run this app.</noscript>
  <div id="root"></div>
</body>
</html>




===========================================================================================================



App.js:
import React, { useContext } from "react";
import { BrowserRouter as Router, Routes, Route, Navigate, useLocation } from 'react-router-dom';
import LandingPage from './pages/landing/LandingPage';
import Login from './pages/auth/login/Login';
import Signup from './pages/auth/signup/signup';
import Home from './pages/home/Home'; 
import Project from './pages/ProjectPage/Project';
import AdminPanel from './pages/Admin/AdminPanel';
import EditUser from './pages/auth/EditUser/EditUser';
import { AuthContext } from './context/AuthContext';
import ForgotPassword from './pages/auth/resetPassword/ForgotPassword';
import Loading from './components/Loading/Loading';
import Terms from './pages/utils/terms'; 


const RequireAuth = ({ children }) => {
  const { currentUser } = useContext(AuthContext);
  let location = useLocation();

  if (!currentUser) {
    return <Navigate to="/" state={{ from: location }} />;
  }

  return children;
};

function App() {
  const { currentUser, isLoading } = useContext(AuthContext); 

  return (
    <div className="app">
      {isLoading ? ( 
        <Loading /> 
      ) : (
        <Router>
          <Routes>
            <Route index element={currentUser ? <Navigate to="/home" /> : <LandingPage />} />
            <Route path="/login" element={currentUser ? <Navigate to="/home" /> : <Login />} />
            <Route path="/signup" element={currentUser ? <Navigate to="/home" /> : <Signup />} />
            <Route path="/forgot-password" element={<ForgotPassword />} /> 
            <Route path="/home" element={<RequireAuth><Home /></RequireAuth>} />
            <Route path="/project/:projectId" element={<RequireAuth><Project /></RequireAuth>} />
            <Route path="/admin" element={<RequireAuth><AdminPanel /></RequireAuth>} />
            <Route path="/users/:userId/edit" element={<RequireAuth><EditUser /></RequireAuth>} />
            <Route path="/terms" element={<Terms />} />
          </Routes>
        </Router>
      )}
    </div>
  );
}

export default App;


==============================================================================================================



AuthContext.js:
import { createContext, useEffect, useReducer } from "react";
import AuthReducer from "./AuthReducer";

const INITIAL_STATE = {
  currentUser: null,
  isLoading: true,
  error: null,
};

export const AuthContext = createContext(INITIAL_STATE);

export const AuthContextProvider = ({ children }) => {
  const [state, dispatch] = useReducer(AuthReducer, INITIAL_STATE);

  // ValidaÃ§Ã£o do token no primeiro carregamento da pÃ¡gina
  useEffect(() => {
    const token = localStorage.getItem("token"); 

    const validateToken = async () => {
      try {
        const response = await fetch('http://localhost:5000/api/validate', {
          method: 'GET',
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        if (!response.ok) {
          throw new Error('Token invÃ¡lido!');
        }

        const responseData = await response.json();
        dispatch({ type: "LOGIN", payload: responseData.user }); 
      } catch (err) {
        console.error('Erro ao validar token:', err);
        dispatch({ type: "LOGOUT" }); 
      } finally {
        dispatch({ type: "SET_LOADING", payload: false });
      }
    };

    if (token) {
      validateToken();
    } else {
      dispatch({ type: "SET_LOADING", payload: false });
    }
  }, []); 

  // Atualiza o token no localStorage quando ele expira ou estÃ¡ prestes a expirar
  useEffect(() => {
    const token = localStorage.getItem("token");

    if (token) {
      const expirationTime = parseInt(localStorage.getItem("tokenExpiration")); 
      const now = new Date().getTime();

      if (expirationTime && now > expirationTime) {
        // Token expirou, faÃ§a o logout
        dispatch({ type: "LOGOUT" });
      } else if (expirationTime && now + 1000 * 60 * 5 > expirationTime) { 
        // Atualize o token
        const updateToken = async () => {
          try {
            // Chame uma funÃ§Ã£o na API para renovar o token
            const response = await fetch('http://localhost:5000/api/refreshToken', {
              method: 'POST',
              headers: {
                Authorization: `Bearer ${token}` 
              }
            }); 
            if (!response.ok) {
              throw new Error('Erro ao atualizar token');
            }

            const newTokenData = await response.json();
            localStorage.setItem("token", newTokenData.token);
            localStorage.setItem("tokenExpiration", newTokenData.expirationTime);
          } catch (err) {
            console.error('Erro ao atualizar token:', err);
            dispatch({ type: "LOGOUT" }); 
          }
        };

        updateToken();
      }
    }
  }, []);

  return (
    <AuthContext.Provider value={{ currentUser: state.currentUser, isLoading: state.isLoading, error: state.error, dispatch }}>
      {children}
    </AuthContext.Provider>
  );
};



==============================================================================================================


AuthReducer.js:
const AuthReducer = (state, action) => {
  switch (action.type) {
    case "LOGIN": {
      return {
        ...state,
        currentUser: action.payload,
        isLoading: false,
      };
    }
    case "LOGOUT": {
      return {
        ...state,
        currentUser: null,
        isLoading: false,
      };
    }
    case "SET_LOADING": {
      return {
        ...state,
        isLoading: action.payload,
      };
    }
    default:
      return state;
  }
};

export default AuthReducer;


===============================================================================================



Loading.jsx:
// Loading.jsx
import React from 'react';
import './Loading.css';

const Loading = ({ isLoading }) => {
  return (
    <div className={`fundo-loading ${isLoading ? 'visible' : 'hidden'}`}>
      <div className={`loader ${isLoading ? 'visible' : 'hidden'}`}></div>
    </div>
  );
};

export default Loading;


===================================================================================================


.fundo-loading {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: #0c121cb4; /* Cor do fundo semi-transparente */
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1;
}
  
.loader {
    position: relative;
    font-size: 10px;
    width: 1em;
    height: 1em;
    border-radius: 50%;
    text-indent: -9999em;
    animation: mulShdSpin 1.1s infinite ease;
    transform: translateZ(0);
    z-index: 1;
}

@keyframes mulShdSpin {
    0%,
    100% {
      box-shadow: 0em -2.6em 0em 0em #ffffff, 1.8em -1.8em 0 0em rgba(255,255,255, 0.2), 2.5em 0em 0 0em rgba(255,255,255, 0.2), 1.75em 1.75em 0 0em rgba(255,255,255, 0.2), 0em 2.5em 0 0em rgba(255,255,255, 0.2), -1.8em 1.8em 0 0em rgba(255,255,255, 0.2), -2.6em 0em 0 0em rgba(255,255,255, 0.5), -1.8em -1.8em 0 0em rgba(255,255,255, 0.7);
    }
    12.5% {
      box-shadow: 0em -2.6em 0em 0em rgba(255,255,255, 0.7), 1.8em -1.8em 0 0em #ffffff, 2.5em 0em 0 0em rgba(255,255,255, 0.2), 1.75em 1.75em 0 0em rgba(255,255,255, 0.2), 0em 2.5em 0 0em rgba(255,255,255, 0.2), -1.8em 1.8em 0 0em rgba(255,255,255, 0.2), -2.6em 0em 0 0em rgba(255,255,255, 0.2), -1.8em -1.8em 0 0em rgba(255,255,255, 0.5);
    }
    25% {
      box-shadow: 0em -2.6em 0em 0em rgba(255,255,255, 0.5), 1.8em -1.8em 0 0em rgba(255,255,255, 0.7), 2.5em 0em 0 0em #ffffff, 1.75em 1.75em 0 0em rgba(255,255,255, 0.2), 0em 2.5em 0 0em rgba(255,255,255, 0.2), -1.8em 1.8em 0 0em rgba(255,255,255, 0.2), -2.6em 0em 0 0em rgba(255,255,255, 0.2), -1.8em -1.8em 0 0em rgba(255,255,255, 0.2);
    }
    37.5% {
      box-shadow: 0em -2.6em 0em 0em rgba(255,255,255, 0.2), 1.8em -1.8em 0 0em rgba(255,255,255, 0.5), 2.5em 0em 0 0em rgba(255,255,255, 0.7), 1.75em 1.75em 0 0em #ffffff, 0em 2.5em 0 0em rgba(255,255,255, 0.2), -1.8em 1.8em 0 0em rgba(255,255,255, 0.2), -2.6em 0em 0 0em rgba(255,255,255, 0.2), -1.8em -1.8em 0 0em rgba(255,255,255, 0.2);
    }
    50% {
      box-shadow: 0em -2.6em 0em 0em rgba(255,255,255, 0.2), 1.8em -1.8em 0 0em rgba(255,255,255, 0.2), 2.5em 0em 0 0em rgba(255,255,255, 0.5), 1.75em 1.75em 0 0em rgba(255,255,255, 0.7), 0em 2.5em 0 0em #ffffff, -1.8em 1.8em 0 0em rgba(255,255,255, 0.2), -2.6em 0em 0 0em rgba(255,255,255, 0.2), -1.8em -1.8em 0 0em rgba(255,255,255, 0.2);
    }
    62.5% {
      box-shadow: 0em -2.6em 0em 0em rgba(255,255,255, 0.2), 1.8em -1.8em 0 0em rgba(255,255,255, 0.2), 2.5em 0em 0 0em rgba(255,255,255, 0.2), 1.75em 1.75em 0 0em rgba(255,255,255, 0.5), 0em 2.5em 0 0em rgba(255,255,255, 0.7), -1.8em 1.8em 0 0em #ffffff, -2.6em 0em 0 0em rgba(255,255,255, 0.2), -1.8em -1.8em 0 0em rgba(255,255,255, 0.2);
    }
    75% {
      box-shadow: 0em -2.6em 0em 0em rgba(255,255,255, 0.2), 1.8em -1.8em 0 0em rgba(255,255,255, 0.2), 2.5em 0em 0 0em rgba(255,255,255, 0.2), 1.75em 1.75em 0 0em rgba(255,255,255, 0.2), 0em 2.5em 0 0em rgba(255,255,255, 0.5), -1.8em 1.8em 0 0em rgba(255,255,255, 0.7), -2.6em 0em 0 0em #ffffff, -1.8em -1.8em 0 0em rgba(255,255,255, 0.2);
    }
    87.5% {
      box-shadow: 0em -2.6em 0em 0em rgba(255,255,255, 0.2), 1.8em -1.8em 0 0em rgba(255,255,255, 0.2), 2.5em 0em 0 0em rgba(255,255,255, 0.2), 1.75em 1.75em 0 0em rgba(255,255,255, 0.2), 0em 2.5em 0 0em rgba(255,255,255, 0.2), -1.8em 1.8em 0 0em rgba(255,255,255, 0.5), -2.6em 0em 0 0em rgba(255,255,255, 0.7), -1.8em -1.8em 0 0em #ffffff;
    }
}


================================================================================================================


Alerts.jsx:
import React from 'react';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import './toasts.css'; 

const Alerts = () => {
  return (
    <ToastContainer
      autoClose={1000}
      hideProgressBar={false}
      closeOnClick
      pauseOnHover
      draggable
      theme="colored"
    />
  );
};

export const showSuccessToast = (message) => {
  toast.success(message, {
    autoClose: 1000,
    hideProgressBar: false,
    closeOnClick: true,
    pauseOnHover: true,
    draggable: true,
    progress: undefined,
    theme: "colored",
    className: "toast-success",
  });
};

export const showErrorToast = (message) => {
  toast.error(message, {
    autoClose: 1000,
    hideProgressBar: false,
    closeOnClick: true,
    pauseOnHover: true,
    draggable: true,
    progress: undefined,
    theme: "colored",
    className: "toast-error",
  });
};

export default Alerts;


===============================================================================================


Layout.jsx:
import React, { useContext } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import './Layout.css';
import { AuthContext } from '../../context/AuthContext';

const Layout = ({ children }) => {
  const navigate = useNavigate();
  const { currentUser, dispatch } = useContext(AuthContext);

  const handleLogout = () => {
    localStorage.removeItem('token'); 
    dispatch({ type: 'LOGOUT' }); 
    navigate('/'); 
  };

  return (
    <div className="container">
      <div className='header'>
        <div className='nav'>
          <div className="nav-bar">
            <div className="bg"></div>
            
            {!currentUser && (
              <>
                <li><Link to="/" className="nav-link active">LandingPage</Link></li>
                <li><Link to="/login" className="nav-link">Login</Link></li>
                <li><Link to="/signup" className="nav-link">Signup</Link></li>
              </>
            )}

            {currentUser && (
              <>
                <li><Link to="/home" className="nav-link active">Home</Link></li>
                <li><Link to="/admin" className="nav-link">Admin</Link></li>
              </>
            )}

            {currentUser && (
              <li className="nav-item-right">
                <button className="nav-link logout-button" onClick={handleLogout}>Logout</button>
              </li>
            )}
          </div>
        </div>
      </div>
      <main>
        <div id="home">
          <div className="filter"></div>
          <section className="intro">
            {children}  
          </section>
        </div>
      </main>
    </div>
  );
}

export default Layout;



===============================================================================================


Layout.css:



.colors {
    --main-background: #0f1013;
    --main-fonts-color: #fff;
    --main-decor-color: #20afb1;
    --main-header-background: #00868dc8;
    --main-font-family: "Patrick Hand SC", cursive;
}


*{
    margin: 0;
    padding: 0;
    scroll-behavior: smooth;
}

.container {
    width: 100%;
    max-width: 100%;
	height: 100vh;
    margin: 0 auto;
    padding: 0; /* Adicionado padding para garantir espaÃ§o nas laterais */
}



main{
    display: flex;
	width: 100%;
	height: 100%;
    margin: 0;
    padding: 0;
	background: var(--main-background);
}

/*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ 
       header
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/

.header{
	margin: 0;
	width: 100%;
	height: 70px;
	display: flex;
    align-items: center; 
	justify-content: space-around; 
    background: transparent;
	position: fixed;
	top: 0;
	transition: 0.3s;
	z-index: 5;
    opacity: 0;
	margin: 0;
	padding: 0;
}


.nav-show{
	opacity: 0;
}

.header:hover{
	opacity: 0.8;
	background: var(--main-header-background);
}

.nav-bar{
	list-style:none;
	position: relative;
	display: flex;
	justify-content: center;
}

a.nav-link{
	margin: 2px;
	padding: 5px 8px;
	text-decoration: none;
	color: var(--main-fonts-color);
	font-family: var(--main-font-family);
	cursor: pointer;
	text-transform: uppercase;
}

.active{
	background: var(--main-decor-color);
}

.nav-link:hover {
	color: #03030c;
    background: var(--main-decor-color);
}

/*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
       home
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/

#home{ 	
    width: 100%;
	height: 100vh;
	color: var(--main-fonts-color);
	display: flex;
	align-items: center;
}

#home .filter{
	background: url('../../static/Quadro\ 2.png') no-repeat;
	background-size:cover;
	background-position:center;
    position: fixed;
    top: 0px;
	height: 100%;
    bottom: 0;
    left: 0px;
    right: 0;
	opacity:100;
}  

.intro {
	text-align:center;
    color: var(--main-fonts-color);
	z-index: 1;
	margin: auto;
	padding: 0px;
}

.intro  p{
    margin: 5px;
	font-size:1rem;
	font-family: var(--main-font-family);
	text-align:center;
}

h3{
	padding-bottom: 15px;
    letter-spacing: normal;
    font-family: var(--main-font-family);
	font-style: normal;
	font-size: 70px;
	color: var(--main-fonts-color);
	text-shadow: 0px 0px 40px var(--main-decor-color);
}

h4{
	padding-bottom: 15px;
    letter-spacing: normal;
    font-family: var(--main-font-family);
	font-style: normal;
	font-size: 40px;
	color: var(--main-fonts-color);
	text-shadow: 0px 0px 40px var(--main-decor-color);
}


/*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    social media
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/

.social-media{
	padding: 10px;
	display: flex;
	position: center;
    align-items: space-around;
	justify-content:center;
}

.social-media a {
    margin: 10px;
    font-size: 2rem;
    text-align:center;
    display: inline-block;
	color: var(--main-fonts-color);
}

.social-media a i{
	cursor: pointer;
}

.social-media  a:hover {
	color: var(--main-decor-color);
	text-shadow: 0 0 50px var(--main-decor-color);
}


/* Estilo moderno para a barra de rolagem */
::-webkit-scrollbar {
	width: 5px;
	height: 6px;
  }
  
  ::-webkit-scrollbar-track {
	background: #888; /* Cor de fundo da barra de rolagem */
  }
  
  ::-webkit-scrollbar-thumb {
	background: #26b7be; /* Cor do botÃ£o da barra de rolagem */
	border-radius: 10px; /* Arredonda as bordas do botÃ£o */
  }
  
::-webkit-scrollbar-thumb:hover {
background: #32d7df; /* Cor do botÃ£o ao passar o mouse */
}

  
@media screen and (max-width: 768px) {
.header {
	flex-direction: column;
	justify-content: center;
	align-items: center;
}

.nav-bar {
	display: flex;
	justify-content: center;
	align-items: center;
	gap: 10px;
}

.nav-link {
	display: block;
	text-align: center;
	width: 100%;
}

.nav-item-right {
	margin-left: 0;
}

}



==============================================================================================



toasts.css:
.toast-success {
    background-color: #2196F3; /* Azul do form.css */
    color: white;
    border: 2px solid #2196F3; /* Ajuste a borda conforme necessÃ¡rio */
    border-radius: 5px; /* Ajuste o raio da borda conforme necessÃ¡rio */
  }
  
  .toast-error {
    background-color: #f44336; /* Vermelho do form.css */
    color: white;
    border: 2px solid #f44336; /* Ajuste a borda conforme necessÃ¡rio */
    border-radius: 5px; /* Ajuste o raio da borda conforme necessÃ¡rio */
  }
  
  .toast-warning {
    background-color: #ffeb3b; /* Amarelo para avisos */
    color: black;
    border: 2px solid #ffeb3b; /* Ajuste a borda conforme necessÃ¡rio */
    border-radius: 5px; /* Ajuste o raio da borda conforme necessÃ¡rio */
  }
  
  /* Estilos adicionais para o conteÃºdo do Toast */
  .toast-message {
    font-size: 16px;
    font-weight: bold;
    margin: 10px;
  }
  
  .toast-progress {
    background-color: #4CAF50; /* Verde para a barra de progresso */
  }

  .Toastify__toast-container { /* Target the toast container */
    top: 30px; /* Set the bottom position */
  }



================================================================================================


Login.jsx:
import React, { useContext, useState } from "react";
import axios from 'axios';
import Layout from '../../../components/layout/Layout';
import "../login/login.css";
import "../form.css";
import { useNavigate } from "react-router-dom";
import { AuthContext } from "../../../context/AuthContext";
import Loading from '../../../components/Loading/Loading';
import Alerts, { showSuccessToast, showErrorToast } from '../../../components/layout/Alerts'; // Importe as funÃ§Ãµes

const Login = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const navigate = useNavigate();
  const { dispatch } = useContext(AuthContext);
  const [isLoading, setIsLoading] = useState(false);

  const handleLogin = async (e) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      const response = await axios.post('http://localhost:5000/api/login', { email, password }); // URL correta

      const { token, user } = response.data;

      localStorage.setItem('token', token); // Salva o token no localStorage
      dispatch({ type: "LOGIN", payload: user }); // Salva o usuÃ¡rio no contexto

      setIsLoading(false);
      navigate("/home");
      showSuccessToast('Login efetuado com sucesso!');
    } catch (error) {
      console.error("Error logging in: ", error);
      setIsLoading(false); // Esconde a animaÃ§Ã£o de loading

      // Ajustando mensagens de erro
      if (error.response && error.response.status === 400) {
        showErrorToast('Credenciais invÃ¡lidas. Verifique o usuÃ¡rio e senha ou faÃ§a seu cadastro');
      } else {
        showErrorToast('Ocorreu um erro ao fazer login. Tente novamente.'); 
      }
    }
  }

  return (
    <Layout>
      <Alerts /> 
      {isLoading && <Loading />}
      <div className="form-popup">
        <div className="form-box">
          <div className="form-content">
            <h2>LOGIN</h2>
            <form onSubmit={handleLogin} method="post">
              <div className="input-field">
                <input
                  type="text"
                  id="loginEmail"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  required
                />
                <label htmlFor="loginEmail">Email</label>
              </div>
              <div className="input-field">
                <input
                  type="password"
                  id="Password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  required
                />
                <label htmlFor="Password">Senha</label>
              </div>
              <button type="submit">Entrar</button>
              <div className="bottom-link">
                Ainda nÃ£o criou sua conta?
                <a href="/signup" id="signup-link"> Criar conta</a>
              </div>
              <p className="forgot-password">Esqueceu sua senha? <a href="/forgot-password">Redefinir senha</a></p>
            </form>
          </div>
        </div>
      </div>
    </Layout>
  )
}

export default Login;



===========================================================================================


login.css:
/* login.css */
/* Estilos especÃ­ficos para a pÃ¡gina de login */



==============================================================================================


signup.jsx:
import { useState } from "react";
import axios from 'axios';
import { useNavigate } from "react-router-dom";
import Layout from '../../../components/layout/Layout';
import "../signup/signup";
import "../form.css";
import Loading from '../../../components/Loading/Loading';
import Alerts, { showSuccessToast, showErrorToast } from '../../../components/layout/Alerts';

const Signup = () => {
  const navigate = useNavigate();
  const [emailSignup, setEmailSignup] = useState("");
  const [passwordSignup, setPasswordSignup] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [acceptedTerms, setAcceptedTerms] = useState(false);

  const handleSignup = (e) => {
    e.preventDefault();

    if (passwordSignup !== confirmPassword) {
      showErrorToast("As senhas nÃ£o estÃ£o iguais.");
      return;
    }
    if (!acceptedTerms) {
      showErrorToast("VocÃª precisa aceitar os Termos de Uso e PolÃ­tica de Privacidade para continuar.");
      return;
    }

    setIsLoading(true);

    axios.post('http://localhost:5000/api/signup', { 
      email: emailSignup,
      password: passwordSignup
    })
      .then(response => {
        showSuccessToast("UsuÃ¡rio cadastrado com sucesso!");
        setIsLoading(false);
        navigate("/login");
      })
      .catch(error => {
        if (error.response && error.response.status === 409) {
          showErrorToast("O email informado jÃ¡ estÃ¡ cadastrado. Por favor, escolha outro.");
        } else if (error.response && error.response.status === 400) {
          showErrorToast("Erro de validaÃ§Ã£o. Verifique os campos e tente novamente.");
        } else if (error.response && error.response.status === 500) {
          showErrorToast("Ocorreu um erro inesperado no servidor. Por favor, tente novamente mais tarde.");
        } else if (error.response && error.response.data && error.response.data.message) {
          showErrorToast(error.response.data.message);
        } else {
          console.error("Error signing up: ", error);
          showErrorToast("Ocorreu um erro ao cadastrar o usuÃ¡rio. Por favor, tente novamente.");
        }
        setIsLoading(false); 
      });
  };

  return (
    <Layout>
      <Alerts /> 
      {isLoading && <Loading />}
      <hr />
      <div className="form-popup">
        <div className="form-box">
          <div className="form-content">
            <h2>CADASTRAR</h2>
            <form onSubmit={handleSignup}>
              <div className="input-field">
                <input
                  type="email"
                  id="signupEmail"
                  value={emailSignup}
                  onChange={(e) => setEmailSignup(e.target.value)}
                  required
                />
                <label htmlFor="signupEmail">Cadastrar email</label>
              </div>
              <div className="input-field">
                <input
                  type="password"
                  id="signupSenha"
                  value={passwordSignup}
                  onChange={(e) => setPasswordSignup(e.target.value)}
                  required
                />
                <label htmlFor="signupSenha">Criar senha</label>
              </div>
              <div className="input-field">
                <input
                  type="password"
                  id="signupConfirmPassword"
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  required
                />
                <label htmlFor="signupConfirmPassword">Confirmar senha</label>
              </div>
              <div className="input-field-terms">
                <label htmlFor="termsCheckbox">
                  <input
                    type="checkbox"
                    id="termsCheckbox"
                    checked={acceptedTerms}
                    onChange={(e) => setAcceptedTerms(e.target.checked)}
                    required
                  />
                    <div>Li e concordo com os <a href="/terms" target="_blank" rel="noopener noreferrer">Termos de Uso e PolÃ­tica de Privacidade</a>.</div>
                </label>
              </div>

              <button type="submit">Cadastrar</button>
              <div className="bottom-link">
                JÃ¡ tem uma conta?
                <a href="/login" id="login-link"> Login</a>
              </div>
            </form>
          </div>
        </div>
      </div>
    </Layout>
  )
}

export default Signup;


=============================================================================================


signup.css:
/* signup.css */
/* Estilos especÃ­ficos para a pÃ¡gina de signup */



===============================================================================================


ForgotPassword.jsx:
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import Layout from '../../../components/layout/Layout';
import "../form.css";
import Loading from '../../../components/Loading/Loading';
import Alerts, { showSuccessToast, showErrorToast } from '../../../components/layout/Alerts';

const ForgotPassword = () => {
  const navigate = useNavigate();
  const [email, setEmail] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      await axios.post('http://localhost:5000/api/forgot-password', { email });
      setIsLoading(false);
      showSuccessToast('Email de redefiniÃ§Ã£o de senha enviado com sucesso!');
      navigate('/login');
    } catch (error) {
      console.error('Erro ao enviar email de redefiniÃ§Ã£o:', error);
      setIsLoading(false);
      showErrorToast('Erro ao enviar email de redefiniÃ§Ã£o. Verifique o email e tente novamente.');
    }
  };

  return (
    <Layout>
      <Alerts />
      {isLoading && <Loading />}
      <div className="form-popup">
        <div className="form-box">
          <div className="form-content">
            <h2>Redefinir Senha</h2>
            <form onSubmit={handleSubmit}>
              <div className="input-field">
                <input
                  type="email"
                  id="forgotPasswordEmail"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  required
                />
                <label htmlFor="forgotPasswordEmail">Email</label>
              </div>
              <button type="submit">Enviar Email</button>
              <p className="forgot-password-message">
                Um email com instruÃ§Ãµes para redefinir sua senha <br/> serÃ¡ enviado para o endereÃ§o informado.
              </p>
            </form>
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default ForgotPassword;



=======================================================================================================


resetPassword.jsx:



=========================================================================================================


VerifyEmail.jsx:
import React, { useState, useEffect } from 'react';
import { useSearchParams, useNavigate, Link } from 'react-router-dom';
import axios from 'axios';
import Layout from '../../../components/layout/Layout';
import Alerts, { showErrorToast, showSuccessToast } from '../../../components/layout/Alerts';

const VerifyEmail = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [searchParams] = useSearchParams();
  const uid = searchParams.get('uid'); 
  const navigate = useNavigate();

  // Verifica se o email foi verificado (opcional)
  useEffect(() => {
    const checkVerificationStatus = async () => {
      if (!uid) return; 

      try {
        const response = await axios.get(`http://localhost:5000/api/validate`, { // Verifica o status de login
          headers: {
            Authorization: `Bearer ${localStorage.getItem('token')}`, 
          },
        });

        if (response.status === 200) { 
          // O usuÃ¡rio estÃ¡ logado (e portanto verificado)
          showSuccessToast('E-mail verificado com sucesso!');
          navigate('/home'); 
        } 
      } catch (error) {
        // Ignora erros aqui, pois o usuÃ¡rio pode ainda nÃ£o estar logado
      }
    };

    checkVerificationStatus();
  }, [uid, navigate]);

  // FunÃ§Ã£o para reenviar o email de verificaÃ§Ã£o
  const resendVerificationEmail = async () => {
    setIsLoading(true);
    try {
      const response = await axios.post('http://localhost:5000/api/resend-verification', { uid });
      if (response.status === 200) {
        showSuccessToast('Email de verificaÃ§Ã£o reenviado!');
      } else {
        showErrorToast('Erro ao reenviar email. Tente novamente.');
      }
    } catch (error) {
      console.error('Erro ao reenviar email:', error);
      showErrorToast('Erro ao reenviar email. Tente novamente.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Layout>
      <Alerts />
      <div className="verify-email-container">
        <h2>Verifique seu email</h2>
        <p>Um email de verificaÃ§Ã£o foi enviado para o endereÃ§o que vocÃª forneceu. Por favor, verifique sua caixa de entrada e clique no link para verificar sua conta.</p>

        {isLoading && (
          <div className="loading-indicator">Enviando...</div>
        )}

        {!isLoading && (
          <button onClick={resendVerificationEmail} disabled={isLoading}>
            Reenviar Email de VerificaÃ§Ã£o
          </button>
        )}

        <Link to="/login">Voltar para o Login</Link>
      </div>
    </Layout>
  );
};

export default VerifyEmail;



======================================================================================================


form.css:
/* form.css */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: Arial, Helvetica, sans-serif;
}

body {
    width: 100%;
    height: 100vh;
}

.form-popup {
    display: flex; /* Altere a exibiÃ§Ã£o para flex */
    justify-content: center;
    position: fixed;
    top: 53%;
    left: 50%;
    max-width: 720px;
    background-color: transparent;
    border: 2px solid #2ffbfe;
    transform: translate(-50%, -50%);
    border-radius: 8px;
    box-shadow: 5px 5px 80px #006395;
    opacity: 100;
}

.form-popup .form-box {
    display: flex;
    
}

.form-box h2 {
    justify-content: baseline;
    text-align: center;
    margin-top: 5px;
    color: #fff;
}

.form-box .form-content {
    display: flex;
    flex-direction: column;
    width: 100%;
    padding: 10px 20px;
    align-items: center;
}

form .input-field {
    height: 45px;
    width: 100%;
    margin-top: 15px;
    position: relative;
}

form .input-field-terms{
    display: flex;
    justify-content: center;
    align-items: center;
    height: 45px;
    width: 100%;
    margin-top: 15px;
    position: relative;
    padding: 5px;
}

form .input-field-terms label{
    display: flex;
    gap: 10px;
    font-size: small;
}

form .input-field-redefinir {
    height: 45px;
    width: 100%;
    position: relative;
}


form .input-field input,
form .input-field-redefinir input {
    width: 100%;
    height: 100%;
    outline: none;
    padding: 0 15px;
    font-size: 0.95rem;
    outline-style: none;
    border-style: none;
    border-radius: 3px;
    background-color: #1e27378c;
    color: #2dfafd;
}

.input-field label {
    position: absolute;
    top: 12px; /* PosiÃ§Ã£o inicial da label */
    left: 15px;
    color: #717171; /* Cor da label */
    pointer-events: none; 
    transition: 0.2s ease; /* TransiÃ§Ã£o suave */
    font-size: 1rem; /* Tamanho da fonte da label */
    margin-bottom: 5px; /* Adiciona um espaÃ§amento maior para a label dos termos */
}

.input-field input:focus {
    border: 2px solid #2ffbfe;
    border-color: #2ffbfe;
}

.input-field input:is(:focus, :valid) {
    padding: 16px 15px 0;
    border-color: #2ffbfe;
    
}

.input-field input:is(:focus, :valid) ~ label {
    font-size: 0.75rem; /* Tamanho da fonte da label em foco */
    top: 5px; /* PosiÃ§Ã£o da label em foco */
}

.form-box a {
    color: #ffffff;
    text-decoration: none;
}

.form-box a:hover {
    text-decoration: underline;
}

.form-box :where(.forgot-pass, .policy-text) {
    display: inline-flex;
    margin-top: 14px;
    font-size: 0.95rem;
    color: #fff;
}

.input-fieldError {
    color: #fff;
    font-size: 0.95rem;
    margin-top: 5px;
}

form button {
    width: 100%;
    outline: none;
    border: none;
    font-size: 1rem;
    font-weight: 500;
    padding: 14px 0;
    border-radius: 3px;
    margin: 25px 0;
    color: #fff;
    cursor: pointer;
    background-color: #1f9398;
    transition: 0.2s ease;
}

form button:hover {
    background-color: #26b7be;
}

.form-box .bottom-link {
    text-align: center;
    color: #fff;
    font-size: 0.95rem;
    margin-top: 1rem;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  .form-box .bottom-link a {
    color: #2ffbfe; /* Cor do link */
    text-decoration: none;
    margin-left: 0.5rem; /* EspaÃ§amento entre o texto e o link */
    font-weight: bold; /* Estilo do link */
    transition: color 0.2s ease; /* TransiÃ§Ã£o suave da cor */
  }
  
  .form-box .bottom-link a:hover {
    text-decoration: underline;
    color: #fff; /* Cor do link ao passar o mouse */
  }
  
  .form-box .forgot-password {
    text-align: center;
    color: #fff;
    font-size: 0.95rem;
    margin-top: 1rem;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .form-box .forgot-password-message {
    text-align: center;
    color: #fff;
    font-size: 0.95rem;
    margin-top: 1rem;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  .form-box .forgot-password a {
    color: #2ffbfe; /* Cor do link */
    text-decoration: none;
    margin-left: 0.5rem; /* EspaÃ§amento entre o texto e o link */
    font-weight: bold; /* Estilo do link */
    transition: color 0.2s ease; /* TransiÃ§Ã£o suave da cor */
  }
  
  .form-box .forgot-password a:hover {
    text-decoration: underline;
    color: #fff; /* Cor do link ao passar o mouse */
  }

.input-field input[type="checkbox"] {
    /* ... (estilos para o checkbox) */
    margin-right: 5px; /* Adiciona um espaÃ§amento Ã  direita do checkbox */
}

.input-field input[type="checkbox"] + label {
    /* ... (estilos para a label do checkbox) */
    /* Alinha a label com o checkbox */
    display: inline-block; /* Define a exibiÃ§Ã£o como bloco inline */
}

@media (max-width: 960px) {
    
    .form-popup {
        display: flex; /* Altere a exibiÃ§Ã£o para flex */
        justify-content: center;
        position: fixed;
        width: 95%;
        top: 53%;
        left: 50%;
        max-width: 720px;
        background-color: transparent;
        border: 2px solid #2ffbfe;
        transform: translate(-50%, -50%);
        border-radius: 8px;
        box-shadow: 5px 5px 80px #006395;
        opacity: 100;
    }
    


   
}


===========================================================================================


LandingPage.jsx:
import React, { useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import { AuthContext } from '../../context/AuthContext'; 
import './LandingPage.css'

function LandingPage() {
  const navigate = useNavigate();
  const { currentUser, isLoading, error } = useContext(AuthContext); 

  const handleGoToLogin = () => {
    navigate('/login');
  };

  const handleGoToSignup = () => {
    navigate('/signup');
  };

  const handleGoToLandingPage = () => {
    navigate('/');
  };

  return (
    <div className="container">
      <div className='header-landing'>
        <div className='nav-landing'>
          <div className="nav-bar-landing">
            <div className="bg"></div>
            <li><a className="nav-link-landing active-landing" href="/" onClick={handleGoToLandingPage}>LandingPage</a></li>
            {/* Exibe o botÃ£o Login se o usuÃ¡rio nÃ£o estiver logado e nÃ£o estiver carregando */}
            {!currentUser && !isLoading && <li><a className="nav-link-landing" href="/login" onClick={handleGoToLogin}>Login</a></li>}
            {/* Exibe o botÃ£o Signup se o usuÃ¡rio nÃ£o estiver logado e nÃ£o estiver carregando */}
            {!currentUser && !isLoading && <li><a className="nav-link-landing" href="/signup" onClick={handleGoToSignup}>Signup</a></li>}
            {/* Exibe o botÃ£o Home se o usuÃ¡rio estiver logado e nÃ£o estiver carregando */}
            {currentUser && !isLoading && <li><a className="nav-link-landing" href="/" onClick={handleGoToLandingPage}>Home</a></li>}
          </div>
        </div>
      </div>
      <main>
        <div id="home">
          <div className="filter"></div>
          <section className="intro">
            <h3>Lista de Tarefas</h3>
            <h4>Organize seu trabalho de forma eficiente</h4>
            <hr />
            <p>Crie, gerencie e acompanhe suas tarefas com facilidade.</p>
            <p>Registre suas atividades e mantenha-se produtivo!</p>
            <div className="social-media">
              <a href="https://github.com/felipeDevSolutions" target="_blank" rel="noreferrer">
                <i className='fab fa-github'></i>
              </a>
              <a href="https://www.linkedin.com/in/felipercostadeveloper/" target="_blank" rel="noreferrer">
                <i className='fab fa-linkedin-in'></i>
              </a>
              <a href="https://www.youtube.com/channel/UCblinmn6DLcGuyJa299OlOQ" target="_blank" rel="noreferrer">
                <i className="fab fa-youtube"></i>
              </a>
            </div>
          </section>
        </div>

        {/* Exibe a mensagem de erro se houver */}
        {error && <div className="error-message">{error}</div>} 
      </main>
    </div>
  );
}

export default LandingPage;



==================================================================================================


LandingPage.css:

/*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ 
       header-landing
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/

.header-landing{
	margin: 0;
	width: 100%;
	height: 70px;
	display: flex;
    align-items: center; 
	justify-content: space-around; 
    background: transparent;
	position: fixed;
	top: 0;
	transition: 0.3s;
	z-index: 5;
    
}

.nav-show-landing{
	opacity: 0;
}

.header-landing:hover{
	opacity: 0.8;
	background: var(--main-header-background);
}


.nav-bar-landing{
	list-style:none;
	position: relative;
	display: flex;
	justify-content: center;
}

a.nav-link-landing{
	margin: 2px;
	padding: 5px 8px;
	text-decoration: none;
	color: var(--main-fonts-color);
	font-family: var(--main-font-family);
	cursor: pointer;
	text-transform: uppercase;
}

.active-landing{
	background: var(--main-decor-color);
}

.nav-link-landing:hover {
	color: #03030c;
    background: var(--main-decor-color);
}



/*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    social media
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/

.social-media{
	padding: 10px;
	display: flex;
	position: center;
    align-items: space-around;
	justify-content:center;
}

.social-media a {
    margin: 10px;
    font-size: 2rem;
    text-align:center;
    display: inline-block;
	color: var(--main-fonts-color);
}

.social-media a i{
	cursor: pointer;
}

.social-media  a:hover {
	color: var(--main-decor-color);
	text-shadow: 0 0 50px var(--main-decor-color);
}


===========================================================================================


Home.jsx:
import React, { useContext, useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import Layout from '../../components/layout/Layout';
import { AuthContext } from '../../context/AuthContext';
import './Home.css';
import Alerts, { showSuccessToast, showErrorToast } from '../../components/layout/Alerts';

function Home() {
  const { currentUser, isLoading, error } = useContext(AuthContext);
  const [projects, setProjects] = useState([]);
  const [newProject, setNewproject] = useState('');
  const [showCompleted, setShowCompleted] = useState(false);

  useEffect(() => {
    const fetchProjects = async () => {
      try {
        const token = localStorage.getItem('token');
        const response = await fetch('http://localhost:5000/api/projects', {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        const data = await response.json();
        setProjects(data);
      } catch (err) {
        console.error('Erro ao carregar tarefas:', err);
        showErrorToast('Erro ao carregar tarefas!');
      }
    };
    fetchProjects();
  }, []);

  const handleNewprojectChange = (event) => {
    setNewproject(event.target.value);
  };

  const handleAddProject = async (event) => {
    event.preventDefault();
    if (newProject.trim() !== '') {
      try {
        const token = localStorage.getItem('token');
        const response = await fetch('http://localhost:5000/api/projects', {
          method: 'POST',
          headers: {
            Authorization: `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ project: newProject }),
        });
        if (response.ok) {
          const newProjectData = await response.json();
          setProjects([...projects, newProjectData]);
          setNewproject('');
          showSuccessToast('Tarefa adicionada!');
        } else {
          showErrorToast('Erro ao adicionar tarefa!');
        }
      } catch (err) {
        console.error('Erro ao adicionar tarefa:', err);
        showErrorToast('Erro ao adicionar tarefa!');
      }
    }
  };

  const handleDeleteProject = async (projectId) => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`http://localhost:5000/api/projects/${projectId}`, {
        method: 'DELETE',
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      if (response.ok) {
        setProjects(projects.filter((project) => project.id !== projectId));
        showSuccessToast('Tarefa deletada!');
      } else {
        showErrorToast('Erro ao deletar tarefa!');
      }
    } catch (err) {
      console.error('Erro ao deletar tarefa:', err);
      showErrorToast('Erro ao deletar tarefa!');
    }
  };

  const handleToggleProjectComplete = async (projectId) => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`http://localhost:5000/api/projects/${projectId}/complete`, {
        method: 'PUT',
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      if (response.ok) {
        const updatedProjects = projects.map((project) =>
          project.id === projectId ? { ...project, completed: !project.completed } : project
        );
        setProjects(updatedProjects);
        showSuccessToast('Tarefa concluÃ­da!');
      } else {
        showErrorToast('Erro ao atualizar tarefa!');
      }
    } catch (err) {
      console.error('Erro ao atualizar tarefa:', err);
      showErrorToast('Erro ao atualizar tarefa!');
    }
  };

  const handleShowCompleted = () => {
    setShowCompleted(!showCompleted);
  };

  return (
    <Layout>
      <Alerts />
      <div className="home-container">
        <div className="project-header">
          <div className="welcome-title">
            <h1>Gerenciador de Projetos</h1>
            {currentUser && <p>Bem-vindo, {currentUser.email}!</p>}
          </div>
          <div className="add-project-input">
            <input
              type="text"
              className="form-control"
              placeholder="Adicionar novo projeto"
              value={newProject}
              onChange={handleNewprojectChange}
              onKeyDown={(event) => {
                if (event.key === 'Enter' && newProject.trim() !== '') {
                  event.preventDefault();
                  handleAddProject(event);
                }
              }}
            />
            <div className='btn-group-header'>
              <button className="btn btn-primary add-project-button" onClick={handleAddProject}>
                Adicionar
              </button>
              <button className={`toggle-completed-button btn ${showCompleted ? 'btn-orange' : 'btn-green'}`} onClick={handleShowCompleted}>
                {showCompleted ? 'Mostrar Pendentes' : 'Mostrar ConcluÃ­das'}
              </button>
            </div>
          </div>
        </div>

        <div className="project-list">
          <div className="col-12">
            {isLoading ? (
              <p>Carregando projetos...</p>
            ) : error ? (
              <p>Erro ao carregar projetos: {error.message}</p>
            ) : (
              <ul className="list-group">
                {projects
                  .filter((project) => (showCompleted ? project.completed : !project.completed))
                  .map((project) => (
                    <Link key={project.id} to={`/project/${project.id}`}>
                      <li className="list-group-item project-item d-flex justify-content-between align-items-center">
                        {project.project}
                        <div>
                          <button
                            className="btn btn-success btn-sm mr-2 project-done-button"
                            onClick={(e) => {
                              e.preventDefault(); // Impede a navegaÃ§Ã£o ao clicar no botÃ£o "Fiz"
                              handleToggleProjectComplete(project.id);
                            }}
                          >
                            Fiz
                          </button>
                          <button
                            className="btn btn-danger btn-sm project-delete-button"
                            onClick={(e) => {
                              e.preventDefault(); // Impede a navegaÃ§Ã£o ao clicar no botÃ£o "Excluir"
                              handleDeleteProject(project.id);
                            }}
                          >
                            Excluir
                          </button>
                        </div>
                      </li>
                    </Link>
                  ))}
              </ul>
            )}
          </div>
        </div>
      </div>
    </Layout>
  );
}

export default Home;



===============================================================================================


main.css:
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300&display=swap');

:root{
	--main-background: #0b0c0f;
	--main-fonts-color: #fff;
	--main-decor-color:#008efbb2;
    --main-header-background:#111614;
	--main-font-family: 'Poppins', sans-serif;
}

*{
    margin: 0;
    padding: 0;
    scroll-behavior: smooth;
}




main{
    display: flex;
	width: 100%;
	height: 100%;
    margin: 0;
    padding: 0;
	background: var(--main-background);
}

/*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ 
       header
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/

header{
	margin: 0;
	width: 100%;
	height: 70px;
	display: flex;
    align-items: center; 
	justify-content: space-around; 
    background: transparent;
	position: fixed;
	top: 0;
	transition: 0.3s;
	z-index: 5;
    
}


.nav-show{
	opacity: 0;
}

header:hover{
	opacity: 0.8;
	background: var(--main-header-background);
}






.nav-bar{
	list-style:none;
	position: relative;
	display: inline-flex;
}

a.nav-link{
	margin: 2px;
	padding: 5px 8px;
	text-decoration: none;
	color: var(--main-fonts-color);
	font-family: var(--main-font-family);
	cursor: pointer;
	text-transform: uppercase;
}

.active{
	background: var(--main-decor-color);
}

.nav-link:hover {
	color: #000000;
    background: var(--main-decor-color);
}

/*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
       home
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/

#home{ 	
    width: 100%;
	height: 100vh;
	color: var(--main-fonts-color);
	display: flex;
	align-items: center;
}

#home .filter{
	background: url('https://images.unsplash.com/photo-1544099858-75feeb57f01b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80') no-repeat;
	background-size: cover;
	background-position:center;
    position: absolute;
    top: 0px;
    bottom: 0;
    left: 0;
    right: 0;
	opacity:.20;
}  

.intro  p{
    margin: 5px;
	font-size:1.2rem;
	font-family: var(--main-font-family);
	text-align:center;
}

h3{
	padding-bottom: 15px;
    letter-spacing: normal;
    font-family: var(--main-font-family);
	font-style: normal;
	font-size: 70px;
	color: var(--main-fonts-color);
	text-shadow: 0px 0px 40px var(--main-decor-color);
}

h4{
	padding-bottom: 15px;
    letter-spacing: normal;
    font-family: var(--main-font-family);
	font-style: normal;
	font-size: 40px;
	color: var(--main-fonts-color);
	text-shadow: 0px 0px 40px var(--main-decor-color);
}


/*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    social media
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/

.social-media{
	padding: 10px;
	display: flex;
	position: center;
    align-items: space-around;
	justify-content:center;
}

.social-media a {
    margin: 10px;
    font-size: 2rem;
    text-align:center;
    display: inline-block;
	color: var(--main-fonts-color);
}

.social-media a i{
	cursor: pointer;
}

.social-media  a:hover {
	color: var(--main-decor-color);
	text-shadow: 0 0 50px var(--main-decor-color);
}



===============================================================================================


home.scss:
* {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

:root {
  --primary-color: #FFBA00;
  --secundary-color: #FFF1CC;
  --shadow-color: #CCC;
  --text-color: #FFF;
}

body {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  font-family: 'karla', sans-serif;
  position: relative;

}

header {
  display: flex;
  background-color: var(--primary-color);
  height: 100%;
  justify-content: center;
  padding: 10px;
  box-shadow: 0 1px 2px var(--shadow-color);
}

.header-title {
  display: flex;
  flex-direction: row;
  justify-content: center;
  text-align: center;
  line-height: 50px;
  color: black;
  font-size: 2rem;
}

main {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  width: 95%;
  margin: auto auto;
  padding: 30px;
  box-shadow: 2px 2px 10px var(--shadow-color);
  gap: 20px;

}

footer {
  width: 100%;
  text-align: center;
  font-weight: 200;
  font-style: italic;
  padding: 20px;

}

#descricao-sistema {
  display: flex;
  justify-content: center;
  padding: 20px;
  width: 100%;
  text-align: center;
  font-weight:normal;
  font-style:italic;
  font-size: 20px;
  margin-bottom: 0px;
}

#searchInput {
  width: 100%;
  height: 40px;
  outline-style: none;
  border-style: none;
  box-shadow: 0 0 2px black;
  padding: 0 10px;
  font-size: 1rem;
}

#searchInput:focus {
  border: 2px solid var(--primary-color);
  box-shadow: 0 0 3px var(--primary-color);
}

.header-controls {
  display: flex;
  align-items: center;
  gap: 20px;
  width: 100%
}

#cadastrarEMH {
  flex-shrink: 0;
  /* Evita que o botÃ£o encolha */
}


.records tr.hidden {
  display: none;
}

@media (max-width: 480px) {
  header {
    text-align: center; /* Centraliza o texto no cabeÃ§alho */
    height: auto; /* Ajusta a altura conforme necessÃ¡rio para centralizar verticalmente */
  }

  .header-title {
    font-size: 1.5rem;
    line-height: 40px;
  }

  main {
    padding: 0;
    margin: 20px 0 0 0;
    width: 100%;
    box-shadow: none;
  }

  .records,
  .records-atrasada {
    border-spacing: 5px;
  }

  .records thead {
    display: none;
  }

  .records tr {
    box-shadow: 0 1px 3px var(--shadow-color);
    
  }

  .records td {
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
    
  }

  .records td {
    margin: 10px 0;
  }

  .records tr:hover {
    background-color: inherit;
  }

  .records-atrasada {
    background-color: #ffcccc;
    /* ou qualquer outra cor vermelha que preferir */
  }
}



============================================================================================



Home.css:
/* Home.css */

.home-container { 
  top: 162px;
  left: 77px;
  width: 100vw;
  min-width: 1235px;
  max-width: 1230px;
  min-height: 430px;
  max-height: 430px;
  overflow-y: hidden; 
  color: #2ffbfe; 
  border-radius: 3px; 
  padding: 10px;
  margin-top: 0px; 
  margin-left: 22px;
  padding-top: 0px; 
  margin-bottom: 17px;
  padding-bottom: 0px;
  background-color: #1f9398;
}

.project-header { 
  display: flex;
  flex-direction: column;
  margin-bottom: 0px;
  top: 70px; 
  width: 100%;
  z-index: 10;
  padding: 0px;
}

.btn-group-header {
  display: flex;
  justify-content: center; 
}

.welcome-title { 
  display: flex;
  align-items:baseline;
  gap: 10px;
  text-align: center;
  margin-bottom: 0px;
  white-space: nowrap;
}

.welcome-title p {
  color: #fff;
}

.add-project-input { 
  display: flex;
  align-items: center;
  width: 100%;
}

.add-project-input .form-control {
  background-color: #232a38bb; 
  color: #f2f2f2; 
  border: 2px solid #2ffbfe5e; 
  border-radius: 3px; 
  flex: 1;
}

.add-project-input .form-control::placeholder {
  color: #6e778abb; 
}

.add-project-button, 
.toggle-completed-button { 
  background-color: #1f9398; 
  color: #fff; 
  border: none;
  border-radius: 3px; 
  transition: background-color 0.2s ease; 
  margin-left: 10px; 
  white-space: nowrap;
}

.add-project-button:hover,
.toggle-completed-button:hover {
  background-color: #26b7be; 
}

.toggle-completed-button {
  background-color: #ff8c00;
  color: #000;
}

.toggle-completed-button:hover {
  background-color: #ffa000;
}

.btn-orange { 
  background-color: #ff8c00; 
  color: #000; 
}

.btn-orange:hover {
  background-color: #ffa000; 
}

.btn-green { 
  background-color: #4CAF50; 
  color: #fff;
}

.btn-green:hover {
  background-color: #45a049; 
}

.col-12 {
  display: flex;
  overflow-y: auto;
}

.list-group {
  display: flex;
  width: 100%;
  gap: 10px;
}

.project-list { 
  display: flex;
  margin-top: 20px;
  height: calc(100vh - 40%); 
  padding-top: 0px; 
  overflow-y: auto;
  padding: 20px;
}

.project-list a li.project-item {  /* Seletor mais especÃ­fico */
  display: flex;
  align-items: center;
  justify-content: space-between;
  color: #2ffbfe;
  height: 50px;
  cursor: pointer; 
  background: rgba(166, 219, 255, 0.087);
    border-radius: 8px;
    box-shadow: 0 4px 15px rgba(0, 162, 255, 0.067);
    backdrop-filter: blur(20.4px);
    -webkit-backdrop-filter: blur(80.4px);
    border: 1px solid rgba(0, 208, 255, 0.145);
}

.project-list a li.project-item:hover {  /* Seletor mais especÃ­fico */
  
  background: rgba(0, 153, 255, 0.014);
    box-shadow: 0 4px 15px rgba(0, 162, 255, 0.131);
    backdrop-filter: blur(20.4px);
    -webkit-backdrop-filter: blur(10.4px);
    border: 1px solid rgba(0, 208, 255, 0.144);
}

.project-item.selected {
  background-color: #26b7be;
}

.project-done-button { 
  background-color: #4CAF50; 
}

.project-done-button:hover {
  background-color: #45a049;
}

.project-delete-button { 
  background-color: #f44336;
}

.project-delete-button:hover {
  background-color: #d32f2f;
}

.project-list li div {
  display: flex;
  gap: 10px;
}

.project-list button { 
  display: inline-block;
  border: none;
  border-radius: 10px;
  font-size: 1rem;
  padding: 5px 15px;
  margin: 0 5px;
}

.project-list button:hover {
  opacity: 0.7; 
}

/* Subtarefas */
.subtasks-list {
  list-style: none;
  padding: 0;
  margin-top: 10px;
  width: 100%;
}

.subtask-item {
  background-color: #1e273798;
  color: #2ffbfe;
  border: none;
  border-radius: 3px;
  height: 40px;
  margin-bottom: 5px;
  display: flex;
  align-items: center;
  padding: 5px 10px;
}

.subtask-item input[type='checkbox'] {
  margin-right: 5px;
}

.subtask-item .button-subtask-item {
  margin-left: auto;
  display: flex;
  gap: 10px;
}

.subtask-item .button-subtask-item button {
  padding: 3px 8px;
  font-size: 13px;
}

/* Adicionar Subtarefa */
.add-subtask-input {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-top: 10px;
}

.add-subtask-button {
  background: none;
  border: none;
  color: #2ffbfe;
  padding: 0;
  font-size: 1rem;
  cursor: pointer;
  text-decoration: underline;
  display: flex;
  align-items: center;
  gap: 5px;
}

.icon-plus {
  font-size: 1.3rem;
}

/* Media Queries */
@media (max-width: 968px) {
  .home-container { 
    height: 90vh;
    padding-top: 0px; 
  }

  .project-header {
    margin: 0;
    padding: 20px; 
    width: 100%;
    text-align: center; 
  }

  .btn-group-header {
    width: 100%; 
    justify-content: center;
    margin-top: 10px;
  }

  .add-project-input {
    padding: 0;
    width: 100%;
    flex-direction: column; 
    align-items: center; 
    margin-bottom: 10px;
  }

  .project-list {
    padding: 0;
    width: 100%; 
    height: auto;
  }

  .project-item {
    text-align: left;
    width: 100%;
    align-items: center; 
    height: auto;
    padding: 20px;
    gap: 10px;
  }

  .button-project-item {
    right: 10px;
    gap: 30px;
    margin: 0;
    padding: 0;
  }

  .button-project-item button {
    margin: 0;
  }
}

=======================================================================================================


Project.jsx:
import React, { useState, useEffect, useRef, useContext } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { AuthContext } from '../../context/AuthContext';
import Layout from '../../components/layout/Layout';
import './Project.css'; 
import Alerts, { showSuccessToast, showErrorToast } from '../../components/layout/Alerts';

const Project = () => {
  const { projectId } = useParams();
  const navigate = useNavigate();
  const [sections, setSections] = useState([]);
  const [newSectionName, setNewSectionName] = useState('');
  const [isAddingSection, setIsAddingSection] = useState(false);
  const [projectName, setProjectName] = useState('')
  const addSectionFormRef = useRef(null); // ReferÃªncia para o formulÃ¡rio de adicionar seÃ§Ã£o

  useEffect(() => {
    if (projectId){
      const fetchProjectName = async () => {
        try {
          const token = localStorage.getItem('token');
          const response = await fetch(`http://localhost:5000/api/projects/${projectId}`, {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          });
    
          if (response.ok) {
            const projectData = await response.json();
            setProjectName(projectData.project);
          } else {
            console.error('Erro ao buscar o nome do projeto.');
            // Opcional: Exibir um erro ao usuÃ¡rio (ex.: showErrorToast)
          }
        } catch (err) {
          console.error('Erro ao buscar o nome do projeto:', err);
          // Opcional: Exibir um erro ao usuÃ¡rio (ex.: showErrorToast)
        }
      };
      fetchProjectName();
    };  
  }, [projectId]);

  useEffect(() => {
    const fetchSections = async () => {
      try {
        const token = localStorage.getItem('token');
        const response = await fetch(`http://localhost:5000/api/projects/${projectId}/sections`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        const data = await response.json();
        setSections(data);
      } catch (err) {
        console.error('Erro ao carregar seÃ§Ãµes:', err);
        showErrorToast('Erro ao carregar seÃ§Ãµes.');
      }
    };

    fetchSections();
  }, [projectId]); 

  const handleAddSection = async () => {
    if (newSectionName.trim() !== '') {
      try {
        const token = localStorage.getItem('token');
        const response = await fetch(`http://localhost:5000/api/projects/${projectId}/sections`, {
          method: 'POST',
          headers: {
            Authorization: `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ name: newSectionName }),
        });

        if (response.ok) {
          const newSection = await response.json();
          setSections([...sections, newSection]);
          setNewSectionName('');
          setIsAddingSection(false)
        } else {
          console.error('Erro ao adicionar seÃ§Ã£o.');
        }
      } catch (err) {
        console.error('Erro ao adicionar seÃ§Ã£o:', err);
      }
    }
  };

  const handleDeleteSection = async (sectionId) => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(
        `http://localhost:5000/api/projects/${projectId}/sections/${sectionId}`,
        {
          method: 'DELETE',
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      if (response.ok) {
        setSections(sections.filter((section) => section.id !== sectionId));
      } else {
        console.error('Erro ao excluir seÃ§Ã£o.');
      }
    } catch (err) {
      console.error('Erro ao excluir seÃ§Ã£o:', err);
    }
  };

  useEffect(() => {
    // FunÃ§Ã£o para lidar com cliques fora do formulÃ¡rio de adicionar lista
    const handleClickOutside = (event) => {
      if (
        addSectionFormRef.current &&
      !addSectionFormRef.current.contains(event.target) && 
      !event.target.classList.contains('add-section-input') &&
      !event.target.classList.contains('add-section-button-salvar') 
      ) {
        setIsAddingSection(false); // Fecha o formulÃ¡rio ao clicar fora
      }
    };

    // Adiciona o event listener quando o componente monta
    document.addEventListener('mousedown', handleClickOutside);

    // Remove o event listener quando o componente desmonta
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [addSectionFormRef]); // Monitora a referÃªncia para garantir atualizaÃ§Ã£o

  return (
    <Layout> 
      <Alerts /> 
      <div className="project-container">
        <h1>{projectName}</h1> 

        

        <div className="sections-container" ref={addSectionFormRef}>
          {sections.map((section) => (
            <SectionColumn
              key={section.id}
              section={section}
              onDelete={handleDeleteSection}
              projectId={projectId}
            />
          ))}

          {/* BotÃ£o e FormulÃ¡rio de Adicionar Lista */}
          {!isAddingSection ? (
            <button className="add-section-button" onClick={() => setIsAddingSection(true)} >
              Adicionar lista
            </button>
          ) : (
            <div className="add-section-form animate-slide-in" > {/* Classe de animaÃ§Ã£o adicionada */}
              <input
                type="text"
                placeholder="Nome da lista"
                value={newSectionName}
                onChange={(e) => setNewSectionName(e.target.value)}
                className="add-section-input"
                ref={addSectionFormRef}
              />
              <div className="add-section-buttons" >
                <button 
                  className='add-section-button-salvar'
                  ref={addSectionFormRef} 
                  onClick={handleAddSection}>
                  Salvar
                </button>
                <button 
                  ref={addSectionFormRef} 
                  onClick={() => setIsAddingSection(false)}>
                  Cancelar
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </Layout>
  );
};

const SectionColumn = ({ section, onDelete, projectId }) => {
  const [tasks, setTasks] = useState([]);
  const [newTaskTitle, setNewTaskTitle] = useState('');
  const [isAddingTask, setIsAddingTask] = useState(false); 
  const { currentUser } = useContext(AuthContext);

  useEffect(() => {
    const fetchTasks = async () => {
      try {
        const token = localStorage.getItem('token');
        const userId = currentUser ? currentUser.id : null; // Obtenha o userId do contexto

        if (!userId) {
          console.error('UsuÃ¡rio nÃ£o autenticado!');
          return; // NÃ£o faÃ§a a requisiÃ§Ã£o se nÃ£o houver userId
        }

        const response = await fetch(
          `http://localhost:5000/api/projects/${projectId}/sections/${section.id}/tasks`,
          {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          }
        );
        const data = await response.json();
        setTasks(data);
      } catch (err) {
        console.error('Erro ao carregar tarefas:', err);
      }
    };

    fetchTasks();
  }, [projectId, section.id, currentUser]);

  const handleAddTask = async () => {
    if (newTaskTitle.trim() !== '') {
      try {
        const token = localStorage.getItem('token');
        const response = await fetch(
          `http://localhost:5000/api/projects/${projectId}/sections/${section.id}/tasks`,
          {
            method: 'POST',
            headers: {
              Authorization: `Bearer ${token}`,
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ title: newTaskTitle }),
          }
        );

        if (response.ok) {
          const newTask = await response.json();
          setTasks([...tasks, newTask]);
          setNewTaskTitle(''); 
          setIsAddingTask(false); 
        } else {
          console.error('Erro ao adicionar tarefa.');
        }
      } catch (err) {
        console.error('Erro ao adicionar tarefa:', err);
      }
    }
  };

  const handleDeleteTask = async (taskId) => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(
        `http://localhost:5000/api/projects/${projectId}/sections/${section.id}/tasks/${taskId}`, 
        {
          method: 'DELETE',
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      if (response.ok) {
        setTasks(tasks.filter((task) => task.id !== taskId));
      } else {
        console.error('Erro ao excluir tarefa.');
      }
    } catch (err) {
      console.error('Erro ao excluir tarefa:', err);
    }
  };

  return (
    <div className="section-column">
      <div className='section-header'>
        <h2>{section.name}</h2>
        <button onClick={() => onDelete(section.id)}>Excluir SeÃ§Ã£o</button>
      </div>
      <div className="tasks-container">
        <div className="tasks-list">
          {tasks.map((task) => (
            <div key={task.id} className="task-card">
              {task.title}
              <button onClick={() => handleDeleteTask(task.id)}>Excluir</button>
            </div>
          ))}
        </div>
        {!isAddingTask && ( 
          <button className="add-task-button" onClick={() => setIsAddingTask(true)}>
            + Adicionar Tarefa
          </button>
        )}
        {isAddingTask && ( 
          <div className="add-task-form">
            <input
              type="text"
              placeholder="TÃ­tulo da Tarefa"
              value={newTaskTitle}
              onChange={(e) => setNewTaskTitle(e.target.value)}
            />
            <div className="add-task-buttons"> {/* Nova div para os botÃµes */}
              <button onClick={handleAddTask}>Salvar</button>
              <button onClick={() => setIsAddingTask(false)}>Cancelar</button> {/* BotÃ£o Cancelar */}
            </div> 
          </div>
        )}
      </div>
    </div>
  );
};

export default Project;


=========================================================================================================


Project.css:
/* Container Principal */
.project-container {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;
  padding: 0;
  margin-top: 50px;
}


.project-container h1{
  margin-top: 30px;
  margin-bottom: 0;
  padding: 10px;
}

/* SeÃ§Ãµes */
.sections-container {
  display: flex;
  gap: 15px;
  overflow-x: auto;
  width: 90vw;
  max-width: 4671px;
  min-height: 350px;
  max-height: 350px;
  padding: 0;
  margin: 0;
}

.section-column {
  background-color: #ffffffd5;
  border-radius: 15px;
  padding: 15px;
  max-width: 280px;
  min-width: 280px;
  flex: 0 0 auto;
  display: flex;
  flex-direction: column;
}

.section-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

/* Tarefas */
.tasks-container {
  display: flex;
  flex-direction: column;
  gap: 10px;
  overflow-y: auto;
  height: 100vh;
  background-color: #ffffff;
  border-radius: 15px;
  padding: 10px;
  position: relative;
}

.tasks-list {
  flex: 1; /* Permite que a lista de tarefas cresÃ§a e ocupe o espaÃ§o disponÃ­vel */
  display: flex;
  flex-direction: column;
  gap: 10px;
  overflow-y: auto; /* A rolagem vertical Ã© aplicada apenas Ã  lista */
}

.task-card {
  background-color: #1e273798;
  padding: 10px;
  border-radius: 5px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 10px;
  text-align: left;
}

/* BotÃµes */
.add-task-button,
.add-section-button,
.add-section-form button,
.add-task-form button {
  background-color: #1f9398;
  color: #fff;
  border: none;
  padding: 8px 12px;
  border-radius: 3px;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.add-task-button:hover,
.add-section-button:hover,
.add-section-form button:hover,
.add-task-form button:hover {
  background-color: #26b7be;
}

.add-section-button {
  min-width: 280px;
  background-color: #1f949827;
  color: #ffffff65;
  margin-bottom: 10px;
  align-self: flex-start;
  white-space: nowrap;
}

.add-section-buttons{
  display: flex;
  justify-content: end;
  gap: 10px;
}

.add-task-button {
  align-self: center;
  margin-top: auto;
}

/* FormulÃ¡rio de Adicionar Lista */
.add-section-form {
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-bottom: 10px;
  animation: fadeIn 0.3s ease; /* AnimaÃ§Ã£o de aparecimento */
}

.add-section-form input {
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 3px;
  width: 280px; /* Largura fixa de 280px */
}

/* FormulÃ¡rio de Adicionar Tarefa */
.add-task-form{
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  gap: 10px;
}


.add-task-button, .add-task-form button {
  background-color: #1f9398;
  color: #fff;
  border: none;
  padding: 8px 12px;
  border-radius: 3px;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.add-task-button:hover,
.add-task-form button:hover {
  background-color: #26b7be;
}

.add-task-form input {
  flex: 1; 
  padding:  0px 8px;
  border: 1px solid #ccc;
  border-radius: 3px;
  padding: 10px;
}

.add-task-buttons{
  display: flex;
  justify-content: right;
  gap: 10px;
}

/* AnimaÃ§Ãµes */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Estilo moderno para a barra de rolagem */
.sections-container::-webkit-scrollbar {
  height: 6px;
  width: 6px;
}

.sections-container::-webkit-scrollbar-track {
  background: #888;
}

.sections-container::-webkit-scrollbar-thumb {
  background: #26b7be;
  border-radius: 10px;
}

.sections-container::-webkit-scrollbar-thumb:hover {
  background: #32d7df;
}



==========================================================================================================


terms.jsx:
import React from 'react';
import Layout from '../../components/layout/Layout';
import './terms.css';

const Terms = () => {
  return (
    <Layout>
      <div className="form-content">
        <div className="terms-container">
          <h1>Termos de Uso e PolÃ­tica de Privacidade - Fiz</h1>
          <p>
            Bem-vindo(a) Ã  plataforma Fiz! Estes termos de uso e a polÃ­tica de privacidade descrevem os termos e condiÃ§Ãµes que regem seu acesso e uso da plataforma Fiz, incluindo o site, aplicativos mÃ³veis e quaisquer outros serviÃ§os relacionados. Ao acessar ou utilizar a plataforma Fiz, vocÃª concorda com estes Termos e a PolÃ­tica de Privacidade. Se vocÃª nÃ£o concorda com estes termos, nÃ£o utilize a plataforma Fiz.
          </p>

          <h2>1. Termos de Uso</h2>

          <h3>1.1 Uso da Plataforma Fiz</h3>
          <p>
            A plataforma Fiz permite que vocÃª gerencie suas tarefas de forma eficiente, crie listas, defina prazos, adicione notas e acompanhe o progresso de suas atividades. VocÃª se compromete a usar a plataforma Fiz de forma responsÃ¡vel e de acordo com estes Termos.
          </p>

          <h3>1.2 ConteÃºdo do UsuÃ¡rio</h3>
          <p>
            VocÃª Ã© o Ãºnico responsÃ¡vel por qualquer conteÃºdo que vocÃª publica na plataforma Fiz, incluindo texto, imagens, vÃ­deos e outros arquivos relacionados Ã s suas tarefas. VocÃª garante que possui todos os direitos necessÃ¡rios para publicar este conteÃºdo e que ele nÃ£o viola os direitos de terceiros. VocÃª concorda em nÃ£o publicar conteÃºdo que seja ilegal, abusivo, difamatÃ³rio, ameaÃ§ador, obsceno, racista, ou que viole de qualquer forma os direitos de terceiros.
          </p>

          <h3>1.3 Contas de UsuÃ¡rio</h3>
          <p>
            VocÃª Ã© responsÃ¡vel por manter a confidencialidade de sua conta e senha na plataforma Fiz. VocÃª concorda em notificar a plataforma imediatamente de qualquer acesso nÃ£o autorizado Ã  sua conta ou de qualquer violaÃ§Ã£o de seguranÃ§a.
          </p>

          <h3>1.4 SuspensÃ£o e Encerramento de Contas</h3>
          <p>
            A plataforma Fiz se reserva o direito de suspender ou encerrar sua conta a qualquer momento, sem aviso prÃ©vio, se vocÃª violar estes Termos ou se a plataforma considerar que sua conta estÃ¡ sendo utilizada de forma inadequada.
          </p>

          <h2>2. PolÃ­tica de Privacidade</h2>

          <h3>2.1 InformaÃ§Ãµes Coletadas</h3>
          <p>
            A plataforma Fiz coleta informaÃ§Ãµes sobre vocÃª quando vocÃª cria uma conta, utiliza a plataforma, interage com seus recursos e comunica-se com a plataforma Fiz. Estas informaÃ§Ãµes podem incluir seu nome, endereÃ§o de e-mail, senha, dados de atividade na plataforma Fiz, como tarefas criadas, prazos definidos e notas adicionadas, e informaÃ§Ãµes sobre o dispositivo que vocÃª utiliza. A plataforma Fiz tambÃ©m pode coletar informaÃ§Ãµes anÃ´nimas sobre o uso da plataforma por meio de cookies e outras tecnologias de rastreamento, como o tempo mÃ©dio de uso, as funcionalidades mais acessadas e as pÃ¡ginas visitadas.
          </p>

          <h3>2.2 Uso das InformaÃ§Ãµes</h3>
          <p>
            A plataforma Fiz utiliza as informaÃ§Ãµes coletadas para fornecer e melhorar a plataforma Fiz, personalizar sua experiÃªncia, enviar comunicados sobre novas funcionalidades ou atualizaÃ§Ãµes, fornecer suporte tÃ©cnico, proteger a plataforma Fiz e cumprir com as leis aplicÃ¡veis.
          </p>

          <h3>2.3 Compartilhamento de InformaÃ§Ãµes</h3>
          <p>
            A plataforma Fiz nÃ£o compartilha suas informaÃ§Ãµes pessoais com terceiros, exceto: (1) para fornecer os serviÃ§os da plataforma Fiz, como enviar notificaÃ§Ãµes sobre tarefas vencidas; (2) para cumprir com as leis aplicÃ¡veis, caso seja necessÃ¡rio por ordem judicial; (3) para proteger os direitos e a seguranÃ§a da plataforma Fiz e de seus usuÃ¡rios, caso haja suspeita de atividade ilegal ou prejudicial; ou (4) com seu consentimento explÃ­cito, caso vocÃª opte por compartilhar seus dados com outras plataformas.
          </p>

          <h3>2.4 SeguranÃ§a das InformaÃ§Ãµes</h3>
          <p>
            A plataforma Fiz utiliza medidas de seguranÃ§a razoÃ¡veis para proteger suas informaÃ§Ãµes pessoais contra acesso nÃ£o autorizado, uso, divulgaÃ§Ã£o, alteraÃ§Ã£o ou destruiÃ§Ã£o. No entanto, nenhuma transmissÃ£o de dados pela internet ou sistema de armazenamento de dados Ã© totalmente seguro. VocÃª reconhece que nÃ£o podemos garantir a seguranÃ§a absoluta de suas informaÃ§Ãµes. Caso haja alguma suspeita de violaÃ§Ã£o de seguranÃ§a, notificaremos vocÃª imediatamente.
          </p>

          <h3>2.5 Cookies</h3>
          <p>
            A plataforma Fiz utiliza cookies para melhorar a experiÃªncia do usuÃ¡rio, fornecer funcionalidades e coletar informaÃ§Ãµes sobre o uso da plataforma. VocÃª pode configurar seu navegador para recusar cookies, mas isso pode afetar sua capacidade de utilizar algumas funcionalidades da plataforma Fiz.
          </p>

          <h2>3. ModificaÃ§Ãµes dos Termos</h2>

          <p>
            A plataforma Fiz se reserva o direito de modificar estes Termos a qualquer momento, a seu critÃ©rio. Se fizermos alteraÃ§Ãµes significativas, notificaremos vocÃª por e-mail ou por meio da plataforma Fiz. VocÃª Ã© responsÃ¡vel por verificar periodicamente os Termos para quaisquer atualizaÃ§Ãµes.
          </p>

          <h2>4. Lei AplicÃ¡vel e JurisdiÃ§Ã£o</h2>

          <p>
            Estes Termos serÃ£o regidos e interpretados de acordo com as leis de Fortaleza-CE/Brasil. VocÃª concorda em se submeter Ã  jurisdiÃ§Ã£o exclusiva dos tribunais de Fortaleza-CE/Brasil para quaisquer disputas relacionadas a estes Termos.
          </p>

          <h2>5. Contato</h2>

          <p>
            Se vocÃª tiver alguma dÃºvida sobre estes Termos ou sobre a PolÃ­tica de Privacidade da plataforma Fiz, entre em contato com a plataforma por meio de [endereÃ§o de e-mail ou formulÃ¡rio de contato].
          </p>

          <p>Ãšltima atualizaÃ§Ã£o: 03 de Junho de 2024</p>
        </div>
      </div>
    </Layout>
  );
};

export default Terms;



=========================================================================================


terms.css:
.form-content{
    display: flex;
    justify-content: center;
    padding: 70px 0px ;
    z-index: 10;
    width: 100%;
}

.terms-container {
    display: flex;
    flex-direction: column;
    width: 100%;
    max-width: 720px;
    padding: 20px;
    align-items: center;
    background-color: #1e2737;
    color: #2ffbfe;
    border-radius: 8px;
    box-shadow: 5px 5px 80px #006395;
    margin-top: 10px;
  }
  
  .terms-container h1,
  .terms-container h2,
  .terms-container h3 {
    color: #2ffbfe;
    font-weight: bold;
    margin-bottom: 20px;
    text-align: center;
    font-size:large;
  }
  
  .terms-container p {
    line-height: 1.6;
    text-align: justify;
    font-size: 1rem;
    margin-bottom: 30px;
  }
  
  .terms-container a {
    color: #2ffbfe;
    text-decoration: none;
  }
  
  .terms-container a:hover {
    text-decoration: underline;
  }

@media (max-width: 960px) {
  
  .terms-container{
    display: flex;
    width: 100%;
  }
  


  
}



